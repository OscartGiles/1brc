<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="261.00"> </text><svg id="frames" x="10" width="1180" total_samples="17529"><g><title>brc_stackyak`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="0.0057%" y="133" width="0.0114%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.2557%" y="143.50"></text></g><g><title>brc_stackyak`__rdl_alloc (64 samples, 0.37%)</title><rect x="0.0171%" y="133" width="0.3651%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="64"/><text x="0.2671%" y="143.50"></text></g><g><title>brc_stackyak`__rdl_dealloc (50 samples, 0.29%)</title><rect x="0.3822%" y="133" width="0.2852%" height="15" fill="rgb(221,193,54)" fg:x="67" fg:w="50"/><text x="0.6322%" y="143.50"></text></g><g><title>brc_stackyak`__rust_alloc (20 samples, 0.11%)</title><rect x="0.6675%" y="133" width="0.1141%" height="15" fill="rgb(248,212,6)" fg:x="117" fg:w="20"/><text x="0.9175%" y="143.50"></text></g><g><title>brc_stackyak`__rust_dealloc (13 samples, 0.07%)</title><rect x="0.7816%" y="133" width="0.0742%" height="15" fill="rgb(208,68,35)" fg:x="137" fg:w="13"/><text x="1.0316%" y="143.50"></text></g><g><title>brc_stackyak`DYLD-STUB$$memcmp (26 samples, 0.15%)</title><rect x="8.0552%" y="117" width="0.1483%" height="15" fill="rgb(232,128,0)" fg:x="1412" fg:w="26"/><text x="8.3052%" y="127.50"></text></g><g><title>brc_stackyak`core::fmt::Formatter::write_formatted_parts (2 samples, 0.01%)</title><rect x="8.2093%" y="69" width="0.0114%" height="15" fill="rgb(207,160,47)" fg:x="1439" fg:w="2"/><text x="8.4593%" y="79.50"></text></g><g><title>brc_stackyak`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.01%)</title><rect x="8.2093%" y="53" width="0.0114%" height="15" fill="rgb(228,23,34)" fg:x="1439" fg:w="2"/><text x="8.4593%" y="63.50"></text></g><g><title>brc_stackyak`alloc::fmt::format::format_inner (4 samples, 0.02%)</title><rect x="8.2035%" y="117" width="0.0228%" height="15" fill="rgb(218,30,26)" fg:x="1438" fg:w="4"/><text x="8.4535%" y="127.50"></text></g><g><title>brc_stackyak`core::fmt::write (4 samples, 0.02%)</title><rect x="8.2035%" y="101" width="0.0228%" height="15" fill="rgb(220,122,19)" fg:x="1438" fg:w="4"/><text x="8.4535%" y="111.50"></text></g><g><title>brc_stackyak`core::fmt::float::float_to_decimal_common_exact (3 samples, 0.02%)</title><rect x="8.2093%" y="85" width="0.0171%" height="15" fill="rgb(250,228,42)" fg:x="1439" fg:w="3"/><text x="8.4593%" y="95.50"></text></g><g><title>brc_stackyak`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2,000 samples, 11.41%)</title><rect x="8.2264%" y="117" width="11.4097%" height="15" fill="rgb(240,193,28)" fg:x="1442" fg:w="2000"/><text x="8.4764%" y="127.50">brc_stackyak`core..</text></g><g><title>brc_stackyak`core::num::dec2flt::parse::parse_number (841 samples, 4.80%)</title><rect x="14.8383%" y="101" width="4.7978%" height="15" fill="rgb(216,20,37)" fg:x="2601" fg:w="841"/><text x="15.0883%" y="111.50">brc_st..</text></g><g><title>brc_stackyak`core::num::dec2flt::parse::parse_number (54 samples, 0.31%)</title><rect x="19.6360%" y="117" width="0.3081%" height="15" fill="rgb(206,188,39)" fg:x="3442" fg:w="54"/><text x="19.8860%" y="127.50"></text></g><g><title>brc_stackyak`core::slice::memchr::memchr_aligned (452 samples, 2.58%)</title><rect x="19.9441%" y="117" width="2.5786%" height="15" fill="rgb(217,207,13)" fg:x="3496" fg:w="452"/><text x="20.1941%" y="127.50">br..</text></g><g><title>brc_stackyak`core::slice::sort::stable::driftsort_main (2 samples, 0.01%)</title><rect x="22.5227%" y="117" width="0.0114%" height="15" fill="rgb(231,73,38)" fg:x="3948" fg:w="2"/><text x="22.7727%" y="127.50"></text></g><g><title>brc_stackyak`core::slice::sort::stable::drift::sort (2 samples, 0.01%)</title><rect x="22.5227%" y="101" width="0.0114%" height="15" fill="rgb(225,20,46)" fg:x="3948" fg:w="2"/><text x="22.7727%" y="111.50"></text></g><g><title>brc_stackyak`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.01%)</title><rect x="22.5227%" y="85" width="0.0114%" height="15" fill="rgb(210,31,41)" fg:x="3948" fg:w="2"/><text x="22.7727%" y="95.50"></text></g><g><title>brc_stackyak`core::str::_&lt;impl str&gt;::trim_matches (455 samples, 2.60%)</title><rect x="22.5341%" y="117" width="2.5957%" height="15" fill="rgb(221,200,47)" fg:x="3950" fg:w="455"/><text x="22.7841%" y="127.50">br..</text></g><g><title>brc_stackyak`core::str::converts::from_utf8 (30 samples, 0.17%)</title><rect x="25.1298%" y="117" width="0.1711%" height="15" fill="rgb(226,26,5)" fg:x="4405" fg:w="30"/><text x="25.3798%" y="127.50"></text></g><g><title>brc_stackyak`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3,723 samples, 21.24%)</title><rect x="25.3009%" y="117" width="21.2391%" height="15" fill="rgb(249,33,26)" fg:x="4435" fg:w="3723"/><text x="25.5509%" y="127.50">brc_stackyak`hashbrown::rustc_ent..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (928 samples, 5.29%)</title><rect x="41.2459%" y="101" width="5.2941%" height="15" fill="rgb(235,183,28)" fg:x="7230" fg:w="928"/><text x="41.4959%" y="111.50">libsys..</text></g><g><title>brc_stackyak`core::slice::memchr::memchr_aligned (1,846 samples, 10.53%)</title><rect x="51.2180%" y="101" width="10.5311%" height="15" fill="rgb(221,5,38)" fg:x="8978" fg:w="1846"/><text x="51.4680%" y="111.50">brc_stackyak`co..</text></g><g><title>brc_stackyak`core::str::converts::from_utf8 (1,394 samples, 7.95%)</title><rect x="61.7491%" y="101" width="7.9525%" height="15" fill="rgb(247,18,42)" fg:x="10824" fg:w="1394"/><text x="61.9991%" y="111.50">brc_stackya..</text></g><g><title>brc_stackyak`std::io::append_to_string (4,346 samples, 24.79%)</title><rect x="46.5400%" y="117" width="24.7932%" height="15" fill="rgb(241,131,45)" fg:x="8158" fg:w="4346"/><text x="46.7900%" y="127.50">brc_stackyak`std::io::append_to_string</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (286 samples, 1.63%)</title><rect x="69.7016%" y="101" width="1.6316%" height="15" fill="rgb(249,31,29)" fg:x="12218" fg:w="286"/><text x="69.9516%" y="111.50"></text></g><g><title>brc_stackyak`std::io::stdio::_print (2 samples, 0.01%)</title><rect x="71.3332%" y="117" width="0.0114%" height="15" fill="rgb(225,111,53)" fg:x="12504" fg:w="2"/><text x="71.5832%" y="127.50"></text></g><g><title>brc_stackyak`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (2 samples, 0.01%)</title><rect x="71.3332%" y="101" width="0.0114%" height="15" fill="rgb(238,160,17)" fg:x="12504" fg:w="2"/><text x="71.5832%" y="111.50"></text></g><g><title>brc_stackyak`core::fmt::write (2 samples, 0.01%)</title><rect x="71.3332%" y="85" width="0.0114%" height="15" fill="rgb(214,148,48)" fg:x="12504" fg:w="2"/><text x="71.5832%" y="95.50"></text></g><g><title>brc_stackyak`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.01%)</title><rect x="71.3332%" y="69" width="0.0114%" height="15" fill="rgb(232,36,49)" fg:x="12504" fg:w="2"/><text x="71.5832%" y="79.50"></text></g><g><title>brc_stackyak`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.01%)</title><rect x="71.3332%" y="53" width="0.0114%" height="15" fill="rgb(209,103,24)" fg:x="12504" fg:w="2"/><text x="71.5832%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.01%)</title><rect x="71.3332%" y="37" width="0.0114%" height="15" fill="rgb(229,88,8)" fg:x="12504" fg:w="2"/><text x="71.5832%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,880 samples, 10.73%)</title><rect x="71.3503%" y="117" width="10.7251%" height="15" fill="rgb(213,181,19)" fg:x="12507" fg:w="1880"/><text x="71.6003%" y="127.50">libsystem_malloc..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (8 samples, 0.05%)</title><rect x="82.0298%" y="101" width="0.0456%" height="15" fill="rgb(254,191,54)" fg:x="14379" fg:w="8"/><text x="82.2798%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2,068 samples, 11.80%)</title><rect x="82.0754%" y="117" width="11.7976%" height="15" fill="rgb(241,83,37)" fg:x="14387" fg:w="2068"/><text x="82.3254%" y="127.50">libsystem_malloc...</text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.01%)</title><rect x="93.8730%" y="117" width="0.0114%" height="15" fill="rgb(233,36,39)" fg:x="16455" fg:w="2"/><text x="94.1230%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (18 samples, 0.10%)</title><rect x="93.8844%" y="117" width="0.1027%" height="15" fill="rgb(226,3,54)" fg:x="16457" fg:w="18"/><text x="94.1344%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (61 samples, 0.35%)</title><rect x="93.9871%" y="117" width="0.3480%" height="15" fill="rgb(245,192,40)" fg:x="16475" fg:w="61"/><text x="94.2371%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (29 samples, 0.17%)</title><rect x="94.3408%" y="117" width="0.1654%" height="15" fill="rgb(238,167,29)" fg:x="16537" fg:w="29"/><text x="94.5908%" y="127.50"></text></g><g><title>brc_stackyak`brc_stackyak::main (16,664 samples, 95.07%)</title><rect x="0.8557%" y="133" width="95.0653%" height="15" fill="rgb(232,182,51)" fg:x="150" fg:w="16664"/><text x="1.1057%" y="143.50">brc_stackyak`brc_stackyak::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (248 samples, 1.41%)</title><rect x="94.5062%" y="117" width="1.4148%" height="15" fill="rgb(231,60,39)" fg:x="16566" fg:w="248"/><text x="94.7562%" y="127.50"></text></g><g><title>brc_stackyak`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (65 samples, 0.37%)</title><rect x="95.9210%" y="133" width="0.3708%" height="15" fill="rgb(208,69,12)" fg:x="16814" fg:w="65"/><text x="96.1710%" y="143.50"></text></g><g><title>brc_stackyak`core::slice::memchr::memchr_aligned (27 samples, 0.15%)</title><rect x="96.2919%" y="133" width="0.1540%" height="15" fill="rgb(235,93,37)" fg:x="16879" fg:w="27"/><text x="96.5419%" y="143.50"></text></g><g><title>brc_stackyak`core::str::_&lt;impl str&gt;::trim_matches (31 samples, 0.18%)</title><rect x="96.4459%" y="133" width="0.1768%" height="15" fill="rgb(213,116,39)" fg:x="16906" fg:w="31"/><text x="96.6959%" y="143.50"></text></g><g><title>brc_stackyak`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (44 samples, 0.25%)</title><rect x="96.6227%" y="133" width="0.2510%" height="15" fill="rgb(222,207,29)" fg:x="16937" fg:w="44"/><text x="96.8727%" y="143.50"></text></g><g><title>brc_stackyak`std::io::append_to_string (19 samples, 0.11%)</title><rect x="96.8738%" y="133" width="0.1084%" height="15" fill="rgb(206,96,30)" fg:x="16981" fg:w="19"/><text x="97.1238%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (19 samples, 0.11%)</title><rect x="96.9821%" y="133" width="0.1084%" height="15" fill="rgb(218,138,4)" fg:x="17000" fg:w="19"/><text x="97.2321%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_free (162 samples, 0.92%)</title><rect x="97.0905%" y="133" width="0.9242%" height="15" fill="rgb(250,191,14)" fg:x="17019" fg:w="162"/><text x="97.3405%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (171 samples, 0.98%)</title><rect x="98.0147%" y="133" width="0.9755%" height="15" fill="rgb(239,60,40)" fg:x="17181" fg:w="171"/><text x="98.2647%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (39 samples, 0.22%)</title><rect x="98.9902%" y="133" width="0.2225%" height="15" fill="rgb(206,27,48)" fg:x="17352" fg:w="39"/><text x="99.2402%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.13%)</title><rect x="99.2127%" y="133" width="0.1255%" height="15" fill="rgb(225,35,8)" fg:x="17391" fg:w="22"/><text x="99.4627%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (38 samples, 0.22%)</title><rect x="99.3382%" y="133" width="0.2168%" height="15" fill="rgb(250,213,24)" fg:x="17413" fg:w="38"/><text x="99.5882%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="99.5550%" y="133" width="0.0285%" height="15" fill="rgb(247,123,22)" fg:x="17451" fg:w="5"/><text x="99.8050%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (28 samples, 0.16%)</title><rect x="99.5835%" y="133" width="0.1597%" height="15" fill="rgb(231,138,38)" fg:x="17456" fg:w="28"/><text x="99.8335%" y="143.50"></text></g><g><title>brc_stackyak`main (17,527 samples, 99.99%)</title><rect x="0.0000%" y="197" width="99.9886%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="17527"/><text x="0.2500%" y="207.50">brc_stackyak`main</text></g><g><title>brc_stackyak`std::rt::lang_start_internal (17,527 samples, 99.99%)</title><rect x="0.0000%" y="181" width="99.9886%" height="15" fill="rgb(251,118,11)" fg:x="0" fg:w="17527"/><text x="0.2500%" y="191.50">brc_stackyak`std::rt::lang_start_internal</text></g><g><title>brc_stackyak`std::rt::lang_start::_{{closure}} (17,527 samples, 99.99%)</title><rect x="0.0000%" y="165" width="99.9886%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="17527"/><text x="0.2500%" y="175.50">brc_stackyak`std::rt::lang_start::_{{closure}}</text></g><g><title>brc_stackyak`std::sys::backtrace::__rust_begin_short_backtrace (17,527 samples, 99.99%)</title><rect x="0.0000%" y="149" width="99.9886%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="17527"/><text x="0.2500%" y="159.50">brc_stackyak`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (43 samples, 0.25%)</title><rect x="99.7433%" y="133" width="0.2453%" height="15" fill="rgb(209,12,38)" fg:x="17484" fg:w="43"/><text x="99.9933%" y="143.50"></text></g><g><title>dyld`start (17,528 samples, 99.99%)</title><rect x="0.0000%" y="213" width="99.9943%" height="15" fill="rgb(227,1,9)" fg:x="0" fg:w="17528"/><text x="0.2500%" y="223.50">dyld`start</text></g><g><title>all (17,529 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="17529"/><text x="0.2500%" y="239.50"></text></g></svg></svg>