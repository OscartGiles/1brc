<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="293.00"> </text><svg id="frames" x="10" width="1180" total_samples="27533"><g><title>brc_stackyak`core::fmt::write (3 samples, 0.01%)</title><rect x="0.0036%" y="149" width="0.0109%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.2536%" y="159.50"></text></g><g><title>brc_stackyak`core::fmt::float::float_to_decimal_common_exact (3 samples, 0.01%)</title><rect x="0.0036%" y="133" width="0.0109%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="3"/><text x="0.2536%" y="143.50"></text></g><g><title>brc_stackyak`brc_stackyak::main (7 samples, 0.03%)</title><rect x="0.0000%" y="165" width="0.0254%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="7"/><text x="0.2500%" y="175.50"></text></g><g><title>brc_stackyak`std::rt::lang_start::_{{closure}} (23 samples, 0.08%)</title><rect x="0.0000%" y="197" width="0.0835%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="23"/><text x="0.2500%" y="207.50"></text></g><g><title>brc_stackyak`std::sys::backtrace::__rust_begin_short_backtrace (23 samples, 0.08%)</title><rect x="0.0000%" y="181" width="0.0835%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="23"/><text x="0.2500%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (16 samples, 0.06%)</title><rect x="0.0254%" y="165" width="0.0581%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="16"/><text x="0.2754%" y="175.50"></text></g><g><title>brc_stackyak`main (25 samples, 0.09%)</title><rect x="0.0000%" y="229" width="0.0908%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="25"/><text x="0.2500%" y="239.50"></text></g><g><title>brc_stackyak`std::rt::lang_start_internal (25 samples, 0.09%)</title><rect x="0.0000%" y="213" width="0.0908%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="25"/><text x="0.2500%" y="223.50"></text></g><g><title>dyld`start (26 samples, 0.09%)</title><rect x="0.0000%" y="245" width="0.0944%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="26"/><text x="0.2500%" y="255.50"></text></g><g><title>brc_stackyak`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="0.0981%" y="117" width="0.0182%" height="15" fill="rgb(220,122,19)" fg:x="27" fg:w="5"/><text x="0.3481%" y="127.50"></text></g><g><title>brc_stackyak`DYLD-STUB$$memcmp (23 samples, 0.08%)</title><rect x="0.1162%" y="117" width="0.0835%" height="15" fill="rgb(250,228,42)" fg:x="32" fg:w="23"/><text x="0.3662%" y="127.50"></text></g><g><title>brc_stackyak`DYLD-STUB$$memcpy (9 samples, 0.03%)</title><rect x="0.1998%" y="117" width="0.0327%" height="15" fill="rgb(240,193,28)" fg:x="55" fg:w="9"/><text x="0.4498%" y="127.50"></text></g><g><title>brc_stackyak`__rdl_alloc (134 samples, 0.49%)</title><rect x="0.2324%" y="117" width="0.4867%" height="15" fill="rgb(216,20,37)" fg:x="64" fg:w="134"/><text x="0.4824%" y="127.50"></text></g><g><title>brc_stackyak`__rdl_dealloc (59 samples, 0.21%)</title><rect x="0.7191%" y="117" width="0.2143%" height="15" fill="rgb(206,188,39)" fg:x="198" fg:w="59"/><text x="0.9691%" y="127.50"></text></g><g><title>brc_stackyak`__rust_alloc (24 samples, 0.09%)</title><rect x="0.9334%" y="117" width="0.0872%" height="15" fill="rgb(217,207,13)" fg:x="257" fg:w="24"/><text x="1.1834%" y="127.50"></text></g><g><title>brc_stackyak`core::hash::BuildHasher::hash_one (684 samples, 2.48%)</title><rect x="1.0242%" y="117" width="2.4843%" height="15" fill="rgb(231,73,38)" fg:x="282" fg:w="684"/><text x="1.2742%" y="127.50">br..</text></g><g><title>brc_stackyak`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (112 samples, 0.41%)</title><rect x="3.5085%" y="117" width="0.4068%" height="15" fill="rgb(225,20,46)" fg:x="966" fg:w="112"/><text x="3.7585%" y="127.50"></text></g><g><title>brc_stackyak`core::str::_&lt;impl str&gt;::trim_matches (154 samples, 0.56%)</title><rect x="3.9153%" y="117" width="0.5593%" height="15" fill="rgb(210,31,41)" fg:x="1078" fg:w="154"/><text x="4.1653%" y="127.50"></text></g><g><title>brc_stackyak`memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (119 samples, 0.43%)</title><rect x="4.4746%" y="117" width="0.4322%" height="15" fill="rgb(221,200,47)" fg:x="1232" fg:w="119"/><text x="4.7246%" y="127.50"></text></g><g><title>brc_stackyak`core::hash::BuildHasher::hash_one (26 samples, 0.09%)</title><rect x="29.2195%" y="101" width="0.0944%" height="15" fill="rgb(226,26,5)" fg:x="8045" fg:w="26"/><text x="29.4695%" y="111.50"></text></g><g><title>brc_stackyak`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2,901 samples, 10.54%)</title><rect x="29.3139%" y="101" width="10.5364%" height="15" fill="rgb(249,33,26)" fg:x="8071" fg:w="2901"/><text x="29.5639%" y="111.50">brc_stackyak`co..</text></g><g><title>brc_stackyak`core::num::dec2flt::parse::parse_number (1,599 samples, 5.81%)</title><rect x="34.0428%" y="85" width="5.8076%" height="15" fill="rgb(235,183,28)" fg:x="9373" fg:w="1599"/><text x="34.2928%" y="95.50">brc_sta..</text></g><g><title>brc_stackyak`core::num::dec2flt::parse::parse_number (90 samples, 0.33%)</title><rect x="39.8504%" y="101" width="0.3269%" height="15" fill="rgb(221,5,38)" fg:x="10972" fg:w="90"/><text x="40.1004%" y="111.50"></text></g><g><title>brc_stackyak`core::str::_&lt;impl str&gt;::trim_matches (719 samples, 2.61%)</title><rect x="40.1772%" y="101" width="2.6114%" height="15" fill="rgb(247,18,42)" fg:x="11062" fg:w="719"/><text x="40.4272%" y="111.50">br..</text></g><g><title>brc_stackyak`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.03%)</title><rect x="42.7887%" y="101" width="0.0327%" height="15" fill="rgb(241,131,45)" fg:x="11781" fg:w="9"/><text x="43.0387%" y="111.50"></text></g><g><title>brc_stackyak`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.01%)</title><rect x="42.8213%" y="101" width="0.0145%" height="15" fill="rgb(249,31,29)" fg:x="11790" fg:w="4"/><text x="43.0713%" y="111.50"></text></g><g><title>brc_stackyak`memchr::arch::x86_64::avx2::memchr::One::find_raw (118 samples, 0.43%)</title><rect x="42.8359%" y="101" width="0.4286%" height="15" fill="rgb(225,111,53)" fg:x="11794" fg:w="118"/><text x="43.0859%" y="111.50"></text></g><g><title>brc_stackyak`memchr::arch::x86_64::avx2::memchr::One::find_raw (1,276 samples, 4.63%)</title><rect x="44.3795%" y="85" width="4.6344%" height="15" fill="rgb(238,160,17)" fg:x="12219" fg:w="1276"/><text x="44.6295%" y="95.50">brc_s..</text></g><g><title>brc_stackyak`memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (8 samples, 0.03%)</title><rect x="48.9849%" y="69" width="0.0291%" height="15" fill="rgb(214,148,48)" fg:x="13487" fg:w="8"/><text x="49.2349%" y="79.50"></text></g><g><title>brc_stackyak`memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (2,607 samples, 9.47%)</title><rect x="43.2644%" y="101" width="9.4686%" height="15" fill="rgb(232,36,49)" fg:x="11912" fg:w="2607"/><text x="43.5144%" y="111.50">brc_stackyak`m..</text></g><g><title>brc_stackyak`memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (1,024 samples, 3.72%)</title><rect x="49.0139%" y="85" width="3.7192%" height="15" fill="rgb(209,103,24)" fg:x="13495" fg:w="1024"/><text x="49.2639%" y="95.50">brc_..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3,054 samples, 11.09%)</title><rect x="52.7331%" y="101" width="11.0921%" height="15" fill="rgb(229,88,8)" fg:x="14519" fg:w="3054"/><text x="52.9831%" y="111.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2,434 samples, 8.84%)</title><rect x="63.8252%" y="101" width="8.8403%" height="15" fill="rgb(213,181,19)" fg:x="17573" fg:w="2434"/><text x="64.0752%" y="111.50">libsystem_ma..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (2,834 samples, 10.29%)</title><rect x="72.6655%" y="101" width="10.2931%" height="15" fill="rgb(254,191,54)" fg:x="20007" fg:w="2834"/><text x="72.9155%" y="111.50">libsystem_platf..</text></g><g><title>brc_stackyak`rayon_core::scope::ScopeBase::execute_job_closure (21,977 samples, 79.82%)</title><rect x="4.9068%" y="117" width="79.8206%" height="15" fill="rgb(241,83,37)" fg:x="1351" fg:w="21977"/><text x="5.1568%" y="127.50">brc_stackyak`rayon_core::scope::ScopeBase::execute_job_closure</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (487 samples, 1.77%)</title><rect x="82.9586%" y="101" width="1.7688%" height="15" fill="rgb(233,36,39)" fg:x="22841" fg:w="487"/><text x="83.2086%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (298 samples, 1.08%)</title><rect x="84.7274%" y="117" width="1.0823%" height="15" fill="rgb(226,3,54)" fg:x="23328" fg:w="298"/><text x="84.9774%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (418 samples, 1.52%)</title><rect x="85.8098%" y="117" width="1.5182%" height="15" fill="rgb(245,192,40)" fg:x="23626" fg:w="418"/><text x="86.0598%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (80 samples, 0.29%)</title><rect x="87.3279%" y="117" width="0.2906%" height="15" fill="rgb(238,167,29)" fg:x="24044" fg:w="80"/><text x="87.5779%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (30 samples, 0.11%)</title><rect x="87.6185%" y="117" width="0.1090%" height="15" fill="rgb(232,182,51)" fg:x="24124" fg:w="30"/><text x="87.8685%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (769 samples, 2.79%)</title><rect x="87.7275%" y="117" width="2.7930%" height="15" fill="rgb(231,60,39)" fg:x="24154" fg:w="769"/><text x="87.9775%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (60 samples, 0.22%)</title><rect x="90.5205%" y="117" width="0.2179%" height="15" fill="rgb(208,69,12)" fg:x="24923" fg:w="60"/><text x="90.7705%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_try_free_default (14 samples, 0.05%)</title><rect x="90.7384%" y="117" width="0.0508%" height="15" fill="rgb(235,93,37)" fg:x="24983" fg:w="14"/><text x="90.9884%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (37 samples, 0.13%)</title><rect x="90.7892%" y="117" width="0.1344%" height="15" fill="rgb(213,116,39)" fg:x="24997" fg:w="37"/><text x="91.0392%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (37 samples, 0.13%)</title><rect x="90.9236%" y="117" width="0.1344%" height="15" fill="rgb(222,207,29)" fg:x="25034" fg:w="37"/><text x="91.1736%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (61 samples, 0.22%)</title><rect x="91.0580%" y="117" width="0.2216%" height="15" fill="rgb(206,96,30)" fg:x="25071" fg:w="61"/><text x="91.3080%" y="127.50"></text></g><g><title>brc_stackyak`&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (25,206 samples, 91.55%)</title><rect x="0.0981%" y="133" width="91.5483%" height="15" fill="rgb(218,138,4)" fg:x="27" fg:w="25206"/><text x="0.3481%" y="143.50">brc_stackyak`&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (101 samples, 0.37%)</title><rect x="91.2796%" y="117" width="0.3668%" height="15" fill="rgb(250,191,14)" fg:x="25132" fg:w="101"/><text x="91.5296%" y="127.50"></text></g><g><title>brc_stackyak`__rdl_alloc (12 samples, 0.04%)</title><rect x="91.6573%" y="69" width="0.0436%" height="15" fill="rgb(239,60,40)" fg:x="25236" fg:w="12"/><text x="91.9073%" y="79.50"></text></g><g><title>brc_stackyak`__rdl_dealloc (6 samples, 0.02%)</title><rect x="91.7009%" y="69" width="0.0218%" height="15" fill="rgb(206,27,48)" fg:x="25248" fg:w="6"/><text x="91.9509%" y="79.50"></text></g><g><title>brc_stackyak`__rust_alloc (3 samples, 0.01%)</title><rect x="91.7227%" y="69" width="0.0109%" height="15" fill="rgb(225,35,8)" fg:x="25254" fg:w="3"/><text x="91.9727%" y="79.50"></text></g><g><title>brc_stackyak`core::hash::BuildHasher::hash_one (64 samples, 0.23%)</title><rect x="91.7336%" y="69" width="0.2324%" height="15" fill="rgb(250,213,24)" fg:x="25257" fg:w="64"/><text x="91.9836%" y="79.50"></text></g><g><title>brc_stackyak`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (11 samples, 0.04%)</title><rect x="91.9660%" y="69" width="0.0400%" height="15" fill="rgb(247,123,22)" fg:x="25321" fg:w="11"/><text x="92.2160%" y="79.50"></text></g><g><title>brc_stackyak`core::str::_&lt;impl str&gt;::trim_matches (13 samples, 0.05%)</title><rect x="92.0060%" y="69" width="0.0472%" height="15" fill="rgb(231,138,38)" fg:x="25332" fg:w="13"/><text x="92.2560%" y="79.50"></text></g><g><title>brc_stackyak`memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (10 samples, 0.04%)</title><rect x="92.0532%" y="69" width="0.0363%" height="15" fill="rgb(231,145,46)" fg:x="25345" fg:w="10"/><text x="92.3032%" y="79.50"></text></g><g><title>brc_stackyak`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (231 samples, 0.84%)</title><rect x="94.3450%" y="53" width="0.8390%" height="15" fill="rgb(251,118,11)" fg:x="25976" fg:w="231"/><text x="94.5950%" y="63.50"></text></g><g><title>brc_stackyak`core::num::dec2flt::parse::parse_number (119 samples, 0.43%)</title><rect x="94.7518%" y="37" width="0.4322%" height="15" fill="rgb(217,147,25)" fg:x="26088" fg:w="119"/><text x="95.0018%" y="47.50"></text></g><g><title>brc_stackyak`core::num::dec2flt::parse::parse_number (6 samples, 0.02%)</title><rect x="95.1840%" y="53" width="0.0218%" height="15" fill="rgb(247,81,37)" fg:x="26207" fg:w="6"/><text x="95.4340%" y="63.50"></text></g><g><title>brc_stackyak`core::str::_&lt;impl str&gt;::trim_matches (58 samples, 0.21%)</title><rect x="95.2058%" y="53" width="0.2107%" height="15" fill="rgb(209,12,38)" fg:x="26213" fg:w="58"/><text x="95.4558%" y="63.50"></text></g><g><title>brc_stackyak`memchr::arch::x86_64::avx2::memchr::One::find_raw (6 samples, 0.02%)</title><rect x="95.4237%" y="53" width="0.0218%" height="15" fill="rgb(227,1,9)" fg:x="26273" fg:w="6"/><text x="95.6737%" y="63.50"></text></g><g><title>brc_stackyak`memchr::arch::x86_64::avx2::memchr::One::find_raw (111 samples, 0.40%)</title><rect x="95.5690%" y="37" width="0.4032%" height="15" fill="rgb(248,47,43)" fg:x="26313" fg:w="111"/><text x="95.8190%" y="47.50"></text></g><g><title>brc_stackyak`memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (246 samples, 0.89%)</title><rect x="95.4455%" y="53" width="0.8935%" height="15" fill="rgb(221,10,30)" fg:x="26279" fg:w="246"/><text x="95.6955%" y="63.50"></text></g><g><title>brc_stackyak`memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (101 samples, 0.37%)</title><rect x="95.9721%" y="37" width="0.3668%" height="15" fill="rgb(210,229,1)" fg:x="26424" fg:w="101"/><text x="96.2221%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (282 samples, 1.02%)</title><rect x="96.3389%" y="53" width="1.0242%" height="15" fill="rgb(222,148,37)" fg:x="26525" fg:w="282"/><text x="96.5889%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (211 samples, 0.77%)</title><rect x="97.3632%" y="53" width="0.7664%" height="15" fill="rgb(234,67,33)" fg:x="26807" fg:w="211"/><text x="97.6132%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (274 samples, 1.00%)</title><rect x="98.1295%" y="53" width="0.9952%" height="15" fill="rgb(247,98,35)" fg:x="27018" fg:w="274"/><text x="98.3795%" y="63.50"></text></g><g><title>brc_stackyak`rayon_core::scope::ScopeBase::execute_job_closure (1,981 samples, 7.20%)</title><rect x="92.0895%" y="69" width="7.1950%" height="15" fill="rgb(247,138,52)" fg:x="25355" fg:w="1981"/><text x="92.3395%" y="79.50">brc_stacky..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (44 samples, 0.16%)</title><rect x="99.1247%" y="53" width="0.1598%" height="15" fill="rgb(213,79,30)" fg:x="27292" fg:w="44"/><text x="99.3747%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_free (26 samples, 0.09%)</title><rect x="99.2845%" y="69" width="0.0944%" height="15" fill="rgb(246,177,23)" fg:x="27336" fg:w="26"/><text x="99.5345%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (45 samples, 0.16%)</title><rect x="99.3789%" y="69" width="0.1634%" height="15" fill="rgb(230,62,27)" fg:x="27362" fg:w="45"/><text x="99.6289%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.03%)</title><rect x="99.5424%" y="69" width="0.0291%" height="15" fill="rgb(216,154,8)" fg:x="27407" fg:w="8"/><text x="99.7924%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc (83 samples, 0.30%)</title><rect x="99.5787%" y="69" width="0.3015%" height="15" fill="rgb(244,35,45)" fg:x="27417" fg:w="83"/><text x="99.8287%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="99.8801%" y="69" width="0.0182%" height="15" fill="rgb(251,115,12)" fg:x="27500" fg:w="5"/><text x="100.1301%" y="79.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (4 samples, 0.01%)</title><rect x="99.9019%" y="69" width="0.0145%" height="15" fill="rgb(240,54,50)" fg:x="27506" fg:w="4"/><text x="100.1519%" y="79.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (5 samples, 0.02%)</title><rect x="99.9165%" y="69" width="0.0182%" height="15" fill="rgb(233,84,52)" fg:x="27510" fg:w="5"/><text x="100.1665%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (7 samples, 0.03%)</title><rect x="99.9346%" y="69" width="0.0254%" height="15" fill="rgb(207,117,47)" fg:x="27515" fg:w="7"/><text x="100.1846%" y="79.50"></text></g><g><title>brc_stackyak`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (2,294 samples, 8.33%)</title><rect x="91.6464%" y="133" width="8.3318%" height="15" fill="rgb(249,43,39)" fg:x="25233" fg:w="2294"/><text x="91.8964%" y="143.50">brc_stackyak..</text></g><g><title>brc_stackyak`rayon_core::scope::ScopeBase::complete (2,294 samples, 8.33%)</title><rect x="91.6464%" y="117" width="8.3318%" height="15" fill="rgb(209,38,44)" fg:x="25233" fg:w="2294"/><text x="91.8964%" y="127.50">brc_stackyak..</text></g><g><title>brc_stackyak`rayon_core::registry::WorkerThread::wait_until_cold (2,294 samples, 8.33%)</title><rect x="91.6464%" y="101" width="8.3318%" height="15" fill="rgb(236,212,23)" fg:x="25233" fg:w="2294"/><text x="91.8964%" y="111.50">brc_stackyak..</text></g><g><title>brc_stackyak`&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (2,294 samples, 8.33%)</title><rect x="91.6464%" y="85" width="8.3318%" height="15" fill="rgb(242,79,21)" fg:x="25233" fg:w="2294"/><text x="91.8964%" y="95.50">brc_stackyak..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.02%)</title><rect x="99.9600%" y="69" width="0.0182%" height="15" fill="rgb(211,96,35)" fg:x="27522" fg:w="5"/><text x="100.2100%" y="79.50"></text></g><g><title>brc_stackyak`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.01%)</title><rect x="99.9782%" y="117" width="0.0145%" height="15" fill="rgb(253,215,40)" fg:x="27527" fg:w="4"/><text x="100.2282%" y="127.50"></text></g><g><title>brc_stackyak`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (4 samples, 0.01%)</title><rect x="99.9782%" y="101" width="0.0145%" height="15" fill="rgb(211,81,21)" fg:x="27527" fg:w="4"/><text x="100.2282%" y="111.50"></text></g><g><title>brc_stackyak`crossbeam_epoch::default::with_handle (3 samples, 0.01%)</title><rect x="99.9818%" y="85" width="0.0109%" height="15" fill="rgb(208,190,38)" fg:x="27528" fg:w="3"/><text x="100.2318%" y="95.50"></text></g><g><title>brc_stackyak`rayon_core::registry::WorkerThread::find_work (5 samples, 0.02%)</title><rect x="99.9782%" y="133" width="0.0182%" height="15" fill="rgb(235,213,38)" fg:x="27527" fg:w="5"/><text x="100.2282%" y="143.50"></text></g><g><title>all (27,533 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="27533"/><text x="0.2500%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (27,506 samples, 99.90%)</title><rect x="0.0981%" y="245" width="99.9019%" height="15" fill="rgb(244,218,35)" fg:x="27" fg:w="27506"/><text x="0.3481%" y="255.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (27,506 samples, 99.90%)</title><rect x="0.0981%" y="229" width="99.9019%" height="15" fill="rgb(240,68,47)" fg:x="27" fg:w="27506"/><text x="0.3481%" y="239.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>brc_stackyak`std::sys::pal::unix::thread::Thread::new::thread_start (27,506 samples, 99.90%)</title><rect x="0.0981%" y="213" width="99.9019%" height="15" fill="rgb(210,16,53)" fg:x="27" fg:w="27506"/><text x="0.3481%" y="223.50">brc_stackyak`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>brc_stackyak`core::ops::function::FnOnce::call_once{{vtable.shim}} (27,506 samples, 99.90%)</title><rect x="0.0981%" y="197" width="99.9019%" height="15" fill="rgb(235,124,12)" fg:x="27" fg:w="27506"/><text x="0.3481%" y="207.50">brc_stackyak`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>brc_stackyak`std::sys::backtrace::__rust_begin_short_backtrace (27,506 samples, 99.90%)</title><rect x="0.0981%" y="181" width="99.9019%" height="15" fill="rgb(224,169,11)" fg:x="27" fg:w="27506"/><text x="0.3481%" y="191.50">brc_stackyak`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>brc_stackyak`rayon_core::registry::ThreadBuilder::run (27,506 samples, 99.90%)</title><rect x="0.0981%" y="165" width="99.9019%" height="15" fill="rgb(250,166,2)" fg:x="27" fg:w="27506"/><text x="0.3481%" y="175.50">brc_stackyak`rayon_core::registry::ThreadBuilder::run</text></g><g><title>brc_stackyak`rayon_core::registry::WorkerThread::wait_until_cold (27,506 samples, 99.90%)</title><rect x="0.0981%" y="149" width="99.9019%" height="15" fill="rgb(242,216,29)" fg:x="27" fg:w="27506"/><text x="0.3481%" y="159.50">brc_stackyak`rayon_core::registry::WorkerThread::wait_until_cold</text></g></svg></svg>